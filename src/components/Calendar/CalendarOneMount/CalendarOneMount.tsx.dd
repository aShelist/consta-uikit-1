import './CalendarOneMount.css';

import React from 'react';
import { addMonths, isWithinInterval } from 'date-fns';

import { cn } from '../../../utils/bem';
import { getMonthTitle, isDateRange, isOnlyOneDateInRange } from '../../../utils/date';
import { isDefined, isNotNil } from '../../../utils/type-guards';
import { DateRange, MinMaxDate } from '../../../utils/types/Date';
import { PropsWithJsxAttributes } from '../../../utils/types/PropsWithJsxAttributes';

type onChangeValueProps<T> = {
  onChange: (value: T) => void;
  value?: T;
};

type SingleProps = {
  type: 'date';
} & onChangeValueProps<Date>;

type RangeProps = {
  type: 'date-range';
} & onChangeValueProps<DateRange>;

export type CalendarOneMountProps = PropsWithJsxAttributes<
  MinMaxDate & { currentVisibleDate: Date } & (SingleProps | RangeProps),
  'div'
>;

const cnCalendarOneMount = cn('CalendarOneMount');

export const CalendarOneMount: React.FC<CalendarOneMountProps> = (props) => {
  const { className, type, minDate, maxDate, value, onChange, ...otherProps } = props;

  let handleSelectDate: (date: Date) => void;
  if (props.type === 'date-range') {
    handleSelectDate = (date: Date): void => {
      if (!isWithinInterval(date, { start: minDate, end: maxDate }) || !isNotNil(props.value)) {
        return;
      }

      if (!isOnlyOneDateInRange(props.value)) {
        return props.onChange([date, undefined]);
      }

      const [startDate, endDate] = props.value;

      if (isDefined(startDate)) {
        return props.onChange(startDate > date ? [date, startDate] : [startDate, date]);
      }

      if (isDefined(endDate)) {
        return props.onChange(endDate > date ? [date, endDate] : [endDate, date]);
      }
    };
  } else {
    handleSelectDate = (date: Date): void => {
      if (!isWithinInterval(date, { start: minDate, end: maxDate })) {
        return;
      }

      return props.onChange(date);
    };
  }
  return (
    <div {...otherProps} className={cnCalendarOneMount({}, [className])} role="button">
      dd
    </div>
  );
};
